<%- include('../partials/header', { title: title }) %>

<div class="row">
  <div class="col-12">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="h3">Session Management</h1>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">All WhatsApp Sessions</h5>
        <div class="d-flex">
          <div class="input-group">
            <input type="text" class="form-control" id="search-input" placeholder="Search sessions...">
            <button class="btn btn-outline-secondary" type="button" id="search-btn">
              <i class="bi bi-search"></i>
            </button>
          </div>
        </div>
      </div>
      <div class="card-body">
        <% if (sessions && sessions.length > 0) { %>
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Name</th>
                  <th>User</th>
                  <th>Status</th>
                  <th>Created</th>
                  <th>Last Active</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% sessions.forEach(session => { %>
                  <tr>
                    <td><%= session.id %></td>
                    <td><%= session.session_name %></td>
                    <td>
                      <a href="/admin/users?search=<%= encodeURIComponent(session.username) %>">
                        <%= session.username %>
                      </a>
                    </td>
                    <td>
                      <% if (session.is_active) { %>
                        <span class="badge bg-success">Active</span>
                      <% } else { %>
                        <span class="badge bg-secondary">Inactive</span>
                      <% } %>
                    </td>
                    <td><%= new Date(session.created_at).toLocaleString() %></td>
                    <td><%= session.updated_at ? new Date(session.updated_at).toLocaleString() : 'Never' %></td>
                    <td>
                      <div class="btn-group">
                        <a href="/admin/messages/<%= session.id %>" class="btn btn-sm btn-info">
                          <i class="bi bi-chat-dots"></i>
                        </a>
                        <button class="btn btn-sm btn-warning set-webhook-btn" data-session-id="<%= session.id %>" data-bs-toggle="modal" data-bs-target="#webhook-modal">
                          <i class="bi bi-link-45deg"></i>
                        </button>
                        <button class="btn btn-sm btn-danger delete-session-btn" data-session-id="<%= session.id %>" data-session-name="<%= session.session_name %>">
                          <i class="bi bi-trash"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
          
          <!-- Pagination -->
          <% if (totalPages > 1) { %>
            <nav aria-label="Session pagination">
              <ul class="pagination justify-content-center">
                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage - 1 %><%= search ? '&search=' + search : '' %>" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
                
                <% for(let i = 1; i <= totalPages; i++) { %>
                  <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %><%= search ? '&search=' + search : '' %>"><%= i %></a>
                  </li>
                <% } %>
                
                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage + 1 %><%= search ? '&search=' + search : '' %>" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
              </ul>
            </nav>
          <% } %>
        <% } else { %>
          <div class="text-center py-5">
            <i class="bi bi-whatsapp text-muted" style="font-size: 3rem;"></i>
            <p class="text-muted mt-3">No WhatsApp sessions found</p>
            <% if (search) { %>
              <p>No results found for "<%= search %>". <a href="/admin/sessions">Clear search</a></p>
            <% } else { %>
              <p>Users can create WhatsApp sessions from their dashboard.</p>
            <% } %>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Session Statistics Card -->
<div class="row mt-4">
  <div class="col-12">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title mb-0">Session Statistics</h5>
      </div>
      <div class="card-body">
        <div class="row">
          <div class="col-md-3 mb-4 mb-md-0">
            <div class="card bg-light">
              <div class="card-body text-center">
                <h6 class="card-title">Total Sessions</h6>
                <h2 class="mb-0"><%= stats.totalSessions %></h2>
              </div>
            </div>
          </div>
          
          <div class="col-md-3 mb-4 mb-md-0">
            <div class="card bg-light">
              <div class="card-body text-center">
                <h6 class="card-title">Active Sessions</h6>
                <h2 class="mb-0 text-success"><%= stats.activeSessions %></h2>
              </div>
            </div>
          </div>
          
          <div class="col-md-3 mb-4 mb-md-0">
            <div class="card bg-light">
              <div class="card-body text-center">
                <h6 class="card-title">Inactive Sessions</h6>
                <h2 class="mb-0 text-secondary"><%= stats.inactiveSessions %></h2>
              </div>
            </div>
          </div>
          
          <div class="col-md-3">
            <div class="card bg-light">
              <div class="card-body text-center">
                <h6 class="card-title">Avg. Messages/Session</h6>
                <h2 class="mb-0 text-primary"><%= stats.avgMessagesPerSession %></h2>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Webhook Modal -->
<div class="modal fade" id="webhook-modal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Configure Webhook</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="webhook-form">
          <input type="hidden" id="webhook-session-id">
          <div class="mb-3">
            <label for="webhook-url" class="form-label">Webhook URL</label>
            <input type="url" class="form-control" id="webhook-url" placeholder="https://your-webhook-url.com/api/webhook">
            <div class="form-text">All incoming messages will be sent to this URL.</div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="save-webhook-btn">Save Webhook</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const searchInput = document.getElementById('search-input');
    const searchBtn = document.getElementById('search-btn');
    const deleteSessionBtns = document.querySelectorAll('.delete-session-btn');
    const setWebhookBtns = document.querySelectorAll('.set-webhook-btn');
    const webhookForm = document.getElementById('webhook-form');
    const webhookSessionIdInput = document.getElementById('webhook-session-id');
    const webhookUrlInput = document.getElementById('webhook-url');
    const saveWebhookBtn = document.getElementById('save-webhook-btn');
    
    // Delete session buttons
    deleteSessionBtns.forEach(button => {
      button.addEventListener('click', async function() {
        const sessionId = this.getAttribute('data-session-id');
        const sessionName = this.getAttribute('data-session-name');
        
        if (confirm(`Are you sure you want to delete the session "${sessionName}"? This will log the user out of WhatsApp.`)) {
          try {
            const response = await fetch(`/api/admin/sessions/${sessionId}`, {
              method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (response.ok) {
              showSuccess(data.message || 'Session deleted successfully');
              
              // Reload page after a short delay
              setTimeout(() => {
                window.location.reload();
              }, 2000);
            } else {
              showError(data.message || 'Failed to delete session');
            }
          } catch (error) {
            console.error('Error deleting session:', error);
            showError('An error occurred while deleting the session');
          }
        }
      });
    });
    
    // Set webhook buttons
    setWebhookBtns.forEach(button => {
      button.addEventListener('click', async function() {
        const sessionId = this.getAttribute('data-session-id');
        webhookSessionIdInput.value = sessionId;
        
        try {
          const response = await fetch(`/api/admin/webhook/${sessionId}`);
          const data = await response.json();
          
          if (response.ok && data.url) {
            webhookUrlInput.value = data.url;
          } else {
            webhookUrlInput.value = '';
          }
        } catch (error) {
          console.error('Error loading webhook URL:', error);
          webhookUrlInput.value = '';
        }
      });
    });
    
    // Save webhook button
    saveWebhookBtn.addEventListener('click', async function() {
      const sessionId = webhookSessionIdInput.value;
      const webhookUrl = webhookUrlInput.value.trim();
      
      try {
        saveWebhookBtn.disabled = true;
        saveWebhookBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        
        const response = await fetch(`/api/admin/webhook/${sessionId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ url: webhookUrl })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showSuccess(data.message || 'Webhook saved successfully');
          
          // Close modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('webhook-modal'));
          modal.hide();
        } else {
          showError(data.message || 'Failed to save webhook URL');
        }
      } catch (error) {
        console.error('Error saving webhook URL:', error);
        showError('An error occurred while saving the webhook URL');
      } finally {
        saveWebhookBtn.disabled = false;
        saveWebhookBtn.textContent = 'Save Webhook';
      }
    });
    
    // Search button
    searchBtn.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim();
      
      if (searchTerm) {
        window.location.href = '/admin/sessions?search=' + encodeURIComponent(searchTerm);
      } else {
        window.location.href = '/admin/sessions';
      }
    });
    
    // Search input enter key
    searchInput.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        searchBtn.click();
      }
    });
    
    // Set search input value from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get('search');
    if (searchParam) {
      searchInput.value = searchParam;
    }
    
    // Helper functions for showing messages
    function showSuccess(message) {
      const toast = document.createElement('div');
      toast.className = 'toast align-items-center text-white bg-success border-0';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      const toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      toastContainer.appendChild(toast);
      
      document.body.appendChild(toastContainer);
      const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
      bsToast.show();
      
      // Remove the container when hidden
      toast.addEventListener('hidden.bs.toast', function () {
        document.body.removeChild(toastContainer);
      });
    }
    
    function showError(message) {
      const toast = document.createElement('div');
      toast.className = 'toast align-items-center text-white bg-danger border-0';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      const toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      toastContainer.appendChild(toast);
      
      document.body.appendChild(toastContainer);
      const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
      bsToast.show();
      
      // Remove the container when hidden
      toast.addEventListener('hidden.bs.toast', function () {
        document.body.removeChild(toastContainer);
      });
    }
  });
</script>

<%- include('../partials/footer') %>