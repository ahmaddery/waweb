<%- include('../partials/header', { title: title }) %>

<div class="row">
  <div class="col-12">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="h3">User Dashboard</h1>
    </div>
  </div>
</div>

<div class="row">
  <!-- WhatsApp Connection Card -->
  <div class="col-md-6 mb-4">
    <div class="card h-100">
      <div class="card-header">
        <h5 class="card-title mb-0">WhatsApp Connection</h5>
      </div>
      <div class="card-body">
        <div class="text-center mb-4" id="qrcode-container">
          <div id="qrcode"></div>
          <p class="text-muted mt-2" id="qr-instructions" style="display: none;">
            Scan this QR code with your WhatsApp to connect
          </p>
        </div>
        
        <div class="d-flex justify-content-between align-items-center mb-3">
          <span>Status:</span>
          <span id="connection-status" class="badge bg-secondary">Disconnected</span>
        </div>
        
        <div class="d-grid gap-2">
          <button id="start-session-btn" class="btn btn-primary">
            Start Session
          </button>
          <button id="delete-session-btn" class="btn btn-danger">
            Delete Session
          </button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Sessions Overview Card -->
  <div class="col-md-6 mb-4">
    <div class="card h-100">
      <div class="card-header">
        <h5 class="card-title mb-0">Your Sessions</h5>
      </div>
      <div class="card-body">
        <% if (sessions && sessions.length > 0) { %>
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Status</th>
                  <th>Created</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% sessions.forEach(session => { %>
                  <tr>
                    <td><%= session.session_name %></td>
                    <td>
                      <% if (session.is_active) { %>
                        <span class="badge bg-success">Active</span>
                      <% } else { %>
                        <span class="badge bg-secondary">Inactive</span>
                      <% } %>
                    </td>
                    <td><%= new Date(session.created_at).toLocaleString() %></td>
                    <td>
                      <a href="/user/messages/<%= session.id %>" class="btn btn-sm btn-info">
                        <i class="bi bi-chat-dots"></i>
                      </a>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        <% } else { %>
          <div class="text-center py-4">
            <p class="text-muted">No sessions found. Start a new session to begin.</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>


<!-- Webhook Configuration Card 
<div class="row">
  <div class="col-12 mb-4">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title mb-0">Webhook Configuration</h5>
      </div>
      <div class="card-body">
        <form id="webhook-form">
          <div class="mb-3">
            <label for="webhook-url" class="form-label">Webhook URL</label>
            <input type="url" class="form-control" id="webhook-url" placeholder="https://your-webhook-url.com/api/webhook">
            <div class="form-text">We'll send all incoming messages to this URL.</div>
          </div>
          <button type="submit" class="btn btn-primary" id="save-webhook-btn">Save Webhook</button>
        </form>
      </div>
    </div>
  </div>
</div>
-->

<!-- Session Name Modal -->
<div class="modal fade" id="session-name-modal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Start New Session</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="session-name-form">
          <div class="mb-3">
            <label for="session-name" class="form-label">Session Name</label>
            <input type="text" class="form-control" id="session-name" required>
            <div class="form-text">Give your session a descriptive name.</div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="confirm-session-btn">Start Session</button>
      </div>
    </div>
  </div>
</div>

<!-- Toast Container -->
<div class="toast-container position-fixed top-0 end-0 p-3" id="toast-container"></div>

<script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.0/build/qrcode.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Socket.io connection
    const socket = io();
    
    // Elements
    const qrcodeContainer = document.getElementById('qrcode-container');
    const qrcodeElement = document.getElementById('qrcode');
    const qrInstructions = document.getElementById('qr-instructions');
    const connectionStatus = document.getElementById('connection-status');
    const startSessionBtn = document.getElementById('start-session-btn');
    const deleteSessionBtn = document.getElementById('delete-session-btn');
    const webhookForm = document.getElementById('webhook-form');
    const webhookUrlInput = document.getElementById('webhook-url');
    const saveWebhookBtn = document.getElementById('save-webhook-btn');
    
    // Session name modal elements
    const sessionNameModal = new bootstrap.Modal(document.getElementById('session-name-modal'));
    const sessionNameInput = document.getElementById('session-name');
    const confirmSessionBtn = document.getElementById('confirm-session-btn');
    
    // Load webhook URL (use global endpoint for dashboard overview)
    fetch('/api/webhook')
      .then(response => response.json())
      .then(data => {
        console.log('[INFO] Loaded webhook data:', data);
        if (data.url) {
          webhookUrlInput.value = data.url;
          console.log('[SUCCESS] Webhook URL loaded:', data.url);
        } else {
          console.log('[INFO] No webhook URL found');
        }
      })
      .catch(error => {
        console.error('[ERROR] Error loading webhook URL:', error);
        // If global webhook fails, we can show a message that session-specific webhooks are recommended
      });

    // Check for existing active sessions on load
    fetch('/api/sessions')
      .then(response => response.json())
      .then(data => {
        console.log('Existing sessions:', data);
        if (data.sessions && data.sessions.length > 0) {
          // Find the first active session or the most recent one
          const activeSession = data.sessions.find(s => s.is_active) || data.sessions[0];
          if (activeSession) {
            window.currentSessionId = activeSession.id;
            console.log('Dashboard using existing session ID:', window.currentSessionId);
            
            // Check session status
            fetch(`/api/whatsapp/session/${activeSession.id}/status`)
              .then(res => res.json())
              .then(statusData => {
                console.log('Session status:', statusData);
                if (statusData.connected) {
                  updateStatus('Connected');
                } else {
                  updateStatus('Disconnected');
                }
              })
              .catch(err => console.error('Error checking session status:', err));
          }
        }
      })
      .catch(error => {
        console.error('Error loading sessions:', error);
      });
    
    // Update status function
    function updateStatus(status) {
      connectionStatus.textContent = status;
      
      if (status === 'Connected') {
        connectionStatus.className = 'badge bg-success';
        startSessionBtn.disabled = true;
        startSessionBtn.innerHTML = 'WhatsApp Connected';
        qrcodeContainer.innerHTML = '<div class="alert alert-success">WhatsApp is connected!</div>';
      } else if (status === 'Disconnected') {
        connectionStatus.className = 'badge bg-secondary';
        startSessionBtn.disabled = false;
        startSessionBtn.innerHTML = 'Start Session';
      }
    }
    
    // Socket.io event listeners
    socket.on('qr', (data) => {
      console.log('Dashboard QR event received:', data);
      console.log('Current session ID:', window.currentSessionId);
      console.log('Received session ID:', data.sessionId);
      
      // Check if this QR code is for our current session
      if (window.currentSessionId && String(data.sessionId) === String(window.currentSessionId)) {
        console.log('QR code matches current session, displaying...');
        
        // Clear previous QR code
        qrcodeElement.innerHTML = '';
        qrInstructions.style.display = 'block';
        
        // Try to generate QR code with canvas (same method as sessions page)
        try {
          console.log('Attempting to generate QR code with canvas...');
          const canvas = document.createElement('canvas');
          qrcodeElement.appendChild(canvas);
          
          // Generate QR code on the canvas
          QRCode.toCanvas(canvas, data.qr, { width: 250, margin: 2 }, function (error) {
            if (error) {
              console.error('Error generating QR code with canvas:', error);
              
              // Remove failed canvas
              if (canvas.parentNode) {
                canvas.parentNode.removeChild(canvas);
              }
              
              // Try alternative method using QRCode.toDataURL() as fallback
              console.log('Trying fallback method with toDataURL...');
              try {
                QRCode.toDataURL(data.qr, { width: 250, margin: 2 }, function (err, dataUrl) {
                  if (err) {
                    console.error('Error generating QR code with dataURL:', err);
                    qrcodeElement.innerHTML = `
                      <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i>
                        Error generating QR code. Please try again.
                      </div>
                    `;
                  } else {
                    console.log('QR code generated successfully with dataURL method');
                    const img = document.createElement('img');
                    img.src = dataUrl;
                    img.style.maxWidth = '100%';
                    img.style.height = 'auto';
                    img.alt = 'WhatsApp QR Code';
                    qrcodeElement.appendChild(img);
                    
                    updateStatus('Pending');
                    connectionStatus.className = 'badge bg-warning';
                  }
                });
              } catch (fallbackError) {
                console.error('Fallback QR generation failed:', fallbackError);
                qrcodeElement.innerHTML = `
                  <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    Failed to generate QR code. Please refresh and try again.
                  </div>
                `;
              }
            } else {
              console.log('QR code generated successfully with canvas method');
              updateStatus('Pending');
              connectionStatus.className = 'badge bg-warning';
            }
          });
        } catch (error) {
          console.error('QR code generation error:', error);
          qrcodeElement.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle"></i>
              QR code generation failed. Please try again.
            </div>
          `;
        }
      } else {
        console.log('QR code not for current session, ignoring');
      }
    });
    
    socket.on('ready', (data) => {
      // Check if this event is for our current session
      if (window.currentSessionId && data.sessionId === window.currentSessionId) {
        updateStatus('Connected');
        showSuccess('WhatsApp client is connected!');
        
        // Hide QR code and show success message
        qrcodeElement.innerHTML = '<div class="text-center"><i class="bi bi-check-circle-fill text-success" style="font-size: 4rem;"></i><p class="mt-3">WhatsApp connected successfully!</p></div>';
        
        // Reload page after a short delay to show updated session status
        setTimeout(() => {
          window.location.reload();
        }, 3000);
      }
    });
    
    socket.on('disconnected', (data) => {
      // Check if this event is for our current session
      if (window.currentSessionId && data.sessionId === window.currentSessionId) {
        updateStatus('Disconnected');
        showError('WhatsApp client disconnected');
      }
    });
    
    socket.on('status', (data) => {
      updateStatus(data.status);
    });
    
    // Start session button
    startSessionBtn.addEventListener('click', () => {
      sessionNameModal.show();
    });
    
    // Confirm session button
    confirmSessionBtn.addEventListener('click', async () => {
      const sessionName = sessionNameInput.value.trim();
      
      if (!sessionName) {
        showError('Session name is required');
        return;
      }
      
      try {
        startSessionBtn.disabled = true;
        startSessionBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Starting...';
        
        // First create the session
        const createResponse = await fetch('/api/sessions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name: sessionName })
        });
        
        const createData = await createResponse.json();
        
        if (!createResponse.ok) {
          throw new Error(createData.message || 'Failed to create session');
        }
        
        // Then start the WhatsApp session
        const response = await fetch(`/api/sessions/${createData.sessionId}/start`, {
          method: 'POST'
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Store the session ID for socket events
          window.currentSessionId = createData.sessionId;
          console.log('Dashboard session ID set to:', window.currentSessionId);
          
          sessionNameModal.hide();
          showSuccess('Session started successfully! Waiting for QR code...');
          
          // Show loading in QR container
          qrcodeElement.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Generating QR code...</p></div>';
          qrInstructions.style.display = 'block';
        } else {
          showError(data.message || 'Failed to start session');
          startSessionBtn.disabled = false;
          startSessionBtn.textContent = 'Start Session';
        }
      } catch (error) {
        console.error('Error starting session:', error);
        showError('An error occurred while starting the session');
        startSessionBtn.disabled = false;
        startSessionBtn.textContent = 'Start Session';
      }
    });
    
    // Delete session button
    deleteSessionBtn.addEventListener('click', async () => {
      if (!confirm('Are you sure you want to delete this session? This will log you out of WhatsApp.')) {
        return;
      }
      
      try {
        deleteSessionBtn.disabled = true;
        deleteSessionBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Deleting...';
        
        const response = await fetch('/api/session/delete', {
          method: 'POST'
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showSuccess(data.message);
          updateStatus('Disconnected');
          
          // Clear QR code container
          qrcodeElement.innerHTML = '';
          qrInstructions.style.display = 'none';
          
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          showError(data.message || 'Failed to delete session');
        }
      } catch (error) {
        console.error('Error deleting session:', error);
        showError('An error occurred while deleting the session');
      } finally {
        deleteSessionBtn.disabled = false;
        deleteSessionBtn.textContent = 'Delete Session';
      }
    });
    
    // Webhook form
    webhookForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const webhookUrl = webhookUrlInput.value.trim();
      
      // Gentle validation dengan toast instead of annoying alert
      if (!webhookUrl) {
        showError('Mohon masukkan URL webhook terlebih dahulu 😊');
        webhookUrlInput.focus();
        return;
      }

      // Basic URL validation (lebih ramah)
      if (!webhookUrl.startsWith('http://') && !webhookUrl.startsWith('https://')) {
        showError('URL webhook harus dimulai dengan http:// atau https:// 🌐');
        webhookUrlInput.focus();
        return;
      }

      try {
        saveWebhookBtn.disabled = true;
        saveWebhookBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Menyimpan...';
        
        const response = await fetch('/api/webhook', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ url: webhookUrl })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showSuccess('🎉 Webhook URL berhasil disimpan!');
          console.log('[SUCCESS] Webhook URL saved:', webhookUrl);
        } else {
          showError('❌ ' + (data.error || data.message || 'Gagal menyimpan webhook URL'));
          console.error('[ERROR] Failed to save webhook:', data);
        }
      } catch (error) {
        console.error('[ERROR] Error saving webhook URL:', error);
        showError('😅 Ups! Terjadi kesalahan saat menyimpan webhook. Coba lagi ya!');
      } finally {
        saveWebhookBtn.disabled = false;
        saveWebhookBtn.textContent = 'Save Webhook';
      }
    });
    
    // Helper functions for showing messages
    function showSuccess(message, element) {
      const toast = document.createElement('div');
      toast.className = 'toast align-items-center text-white bg-success border-0 shadow';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body fw-bold">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      const container = document.getElementById('toast-container') || document.body;
      container.appendChild(toast);
      const bsToast = new bootstrap.Toast(toast, { delay: 4000 });
      bsToast.show();
      
      // Remove the element when hidden
      toast.addEventListener('hidden.bs.toast', function () {
        if (toast.parentElement) {
          toast.parentElement.removeChild(toast);
        }
      });
    }
    
    function showError(message, element) {
      const toast = document.createElement('div');
      toast.className = 'toast align-items-center text-white bg-danger border-0 shadow';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body fw-bold">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      const container = document.getElementById('toast-container') || document.body;
      container.appendChild(toast);
      const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
      bsToast.show();
      
      // Remove the element when hidden
      toast.addEventListener('hidden.bs.toast', function () {
        if (toast.parentElement) {
          toast.parentElement.removeChild(toast);
        }
      });
    }
  });
</script>

<%- include('../partials/footer') %>