<%- include('../partials/header', { title: title }) %>

<div class="row">
  <div class="col-12">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="h3">WhatsApp Sessions</h1>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#new-session-modal">
        <i class="bi bi-plus-circle me-1"></i> New Session
      </button>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-12">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title mb-0">Your WhatsApp Sessions</h5>
      </div>
      <div class="card-body">
        <% if (sessions && sessions.length > 0) { %>
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>Name</th>
                  <th>Status</th>
                  <th>Created</th>
                  <th>Last Active</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% sessions.forEach(session => { %>
                  <tr>
                    <td><%= session.session_name %></td>
                    <td>
                      <% if (session.is_active) { %>
                        <span class="badge bg-success">Active</span>
                      <% } else { %>
                        <span class="badge bg-secondary">Inactive</span>
                      <% } %>
                    </td>
                    <td><%= new Date(session.created_at).toLocaleString() %></td>
                    <td><%= session.updated_at ? new Date(session.updated_at).toLocaleString() : 'Never' %></td>
                    <td>
                      <div class="btn-group">
                        <a href="/user/messages/<%= session.id %>" class="btn btn-sm btn-info">
                          <i class="bi bi-chat-dots"></i> Messages
                        </a>
                        <% if (!session.is_active) { %>
                          <button class="btn btn-sm btn-success restart-session-btn" data-session-id="<%= session.id %>" data-session-name="<%= session.session_name %>">
                            <i class="bi bi-arrow-clockwise"></i> Restart
                          </button>
                        <% } %>
                        <button class="btn btn-sm btn-warning set-webhook-btn" data-session-id="<%= session.id %>">
                          <i class="bi bi-link-45deg"></i> Webhook
                        </button>
                        <button class="btn btn-sm btn-danger delete-session-btn" data-session-id="<%= session.id %>" data-session-name="<%= session.session_name %>">
                          <i class="bi bi-trash"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
        <% } else { %>
          <div class="text-center py-5">
            <i class="bi bi-whatsapp text-muted" style="font-size: 3rem;"></i>
            <p class="text-muted mt-3">No WhatsApp sessions found</p>
            <p>Click the "New Session" button to create your first WhatsApp session.</p>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- New Session Modal -->
<div class="modal fade" id="new-session-modal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Create New WhatsApp Session</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="new-session-form">
          <div class="mb-3">
            <label for="session-name" class="form-label">Session Name</label>
            <input type="text" class="form-control" id="session-name" required>
            <div class="form-text">Give your session a descriptive name (e.g., "Business", "Personal")</div>
          </div>
          
          <div id="qrcode-container" class="text-center my-4" style="display: none;">
            <div id="qrcode"></div>
            <p class="text-muted mt-2">Scan this QR code with your WhatsApp to connect</p>
          </div>
          
          <div id="session-status" class="alert alert-info" style="display: none;"></div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="create-session-btn">Create Session</button>
        <button type="button" class="btn btn-success" id="connect-qr-btn" style="display: none;">Connect via QR</button>
      </div>
    </div>
  </div>
</div>

<!-- Webhook Modal -->
<div class="modal fade" id="webhook-modal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Configure Webhook</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="webhook-form">
          <input type="hidden" id="webhook-session-id">
          <div class="mb-3">
            <label for="webhook-url" class="form-label">Webhook URL</label>
            <input type="url" class="form-control" id="webhook-url" placeholder="https://your-webhook-url.com/api/webhook">
            <div class="form-text">We'll send all incoming messages to this URL.</div>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="save-webhook-btn">Save Webhook</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.0/build/qrcode.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Socket.io connection
    const socket = io();
    
    // Elements
    const newSessionModal = new bootstrap.Modal(document.getElementById('new-session-modal'));
    const webhookModal = new bootstrap.Modal(document.getElementById('webhook-modal'));
    const newSessionForm = document.getElementById('new-session-form');
    const sessionNameInput = document.getElementById('session-name');
    const createSessionBtn = document.getElementById('create-session-btn');
    const connectQrBtn = document.getElementById('connect-qr-btn');
    const qrcodeContainer = document.getElementById('qrcode-container');
    const qrcodeElement = document.getElementById('qrcode');
    const sessionStatus = document.getElementById('session-status');
    const webhookForm = document.getElementById('webhook-form');
    const webhookSessionIdInput = document.getElementById('webhook-session-id');
    const webhookUrlInput = document.getElementById('webhook-url');
    const saveWebhookBtn = document.getElementById('save-webhook-btn');
    
    // Variable to store current session ID
    let currentSessionId = null;
    
    // Delete session buttons
    document.querySelectorAll('.delete-session-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const sessionId = this.getAttribute('data-session-id');
        const sessionName = this.getAttribute('data-session-name');
        
        if (confirm(`Are you sure you want to delete the session "${sessionName}"? This will log you out of WhatsApp.`)) {
          try {
            const response = await fetch(`/api/whatsapp/session/${sessionId}`, {
              method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (response.ok) {
              showSuccess(data.message || 'Session deleted successfully');
              
              // Reload page after a short delay
              setTimeout(() => {
                window.location.reload();
              }, 2000);
            } else {
              showError(data.message || 'Failed to delete session');
            }
          } catch (error) {
            console.error('Error deleting session:', error);
            showError('An error occurred while deleting the session');
          }
        }
      });
    });
    
    // Restart session buttons
    document.querySelectorAll('.restart-session-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const sessionId = this.getAttribute('data-session-id');
        const sessionName = this.getAttribute('data-session-name');
        
        if (confirm(`Are you sure you want to restart the session "${sessionName}"? This will reconnect your WhatsApp.`)) {
          try {
            // Disable button and show loading
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Restarting...';
            
            const response = await fetch(`/api/sessions/${sessionId}/restart`, {
              method: 'POST'
            });
            
            const data = await response.json();
            
            if (response.ok) {
              showSuccess(data.message || 'Session restarted successfully. Please scan the QR code to reconnect.');
              
              // Reload page after a short delay
              setTimeout(() => {
                window.location.reload();
              }, 2000);
            } else {
              showError(data.message || 'Failed to restart session');
              // Re-enable button
              this.disabled = false;
              this.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Restart';
            }
          } catch (error) {
            console.error('Error restarting session:', error);
            showError('An error occurred while restarting the session');
            // Re-enable button
            this.disabled = false;
            this.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Restart';
          }
        }
      });
    });
    
    // Set webhook buttons
    document.querySelectorAll('.set-webhook-btn').forEach(button => {
      button.addEventListener('click', async function() {
        const sessionId = this.getAttribute('data-session-id');
        webhookSessionIdInput.value = sessionId;
        
        try {
          const response = await fetch(`/api/whatsapp/webhook/${sessionId}`);
          const data = await response.json();
          
          if (response.ok && data.url) {
            webhookUrlInput.value = data.url;
          } else {
            webhookUrlInput.value = '';
          }
        } catch (error) {
          console.error('Error loading webhook URL:', error);
          webhookUrlInput.value = '';
        }
        
        webhookModal.show();
      });
    });
    
    // Create session button
    createSessionBtn.addEventListener('click', async function() {
      const sessionName = sessionNameInput.value.trim();
      
      if (!sessionName) {
        showError('Session name is required');
        return;
      }
      
      try {
        createSessionBtn.disabled = true;
        createSessionBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Creating...';
        
        const response = await fetch('/api/sessions', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ name: sessionName })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          // Store session ID (ensure it's a string for comparison)
          currentSessionId = String(data.sessionId);
          console.log('Session created with ID:', currentSessionId);
          
          // Update status
          sessionStatus.style.display = 'block';
          sessionStatus.className = 'alert alert-info';
          sessionStatus.textContent = 'Session created successfully! Starting WhatsApp connection...';
          
          // Disable form inputs
          sessionNameInput.disabled = true;
          
          // Update buttons
          createSessionBtn.style.display = 'none';
          connectQrBtn.style.display = 'inline-block';
          connectQrBtn.disabled = true;
          connectQrBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Starting...';
          
          // Automatically start the WhatsApp session
          console.log('Starting WhatsApp session for ID:', currentSessionId);
          const startResponse = await fetch(`/api/sessions/${currentSessionId}/start`, {
            method: 'POST'
          });
          
          const startData = await startResponse.json();
          console.log('Start session response:', startData);
          
          if (startResponse.ok) {
            // Show QR code container
            qrcodeContainer.style.display = 'block';
            sessionStatus.textContent = 'Waiting for QR code...';
            connectQrBtn.innerHTML = 'Waiting for QR...';
            console.log('QR container displayed, waiting for QR event...');
          } else {
            showError(startData.message || 'Failed to start WhatsApp session');
            connectQrBtn.disabled = false;
            connectQrBtn.innerHTML = 'Retry Connection';
          }
        } else {
          showError(data.message || 'Failed to create session');
          createSessionBtn.disabled = false;
          createSessionBtn.textContent = 'Create Session';
        }
      } catch (error) {
        console.error('Error creating session:', error);
        showError('An error occurred while creating the session');
        createSessionBtn.disabled = false;
        createSessionBtn.textContent = 'Create Session';
      }
    });
    
    // Connect via QR button
    connectQrBtn.addEventListener('click', async function() {
      if (!currentSessionId) {
        showError('No session ID available');
        return;
      }
      
      try {
        connectQrBtn.disabled = true;
        connectQrBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Connecting...';
        
        // Check if session already exists first
        const statusResponse = await fetch(`/api/whatsapp/session/${currentSessionId}/status`);
        const statusData = await statusResponse.json();
        
        if (statusData.status === 'Connected') {
          showSuccess('Session is already connected!');
          connectQrBtn.disabled = false;
          connectQrBtn.textContent = 'Already Connected';
          return;
        }
        
        // Start the WhatsApp session
        const startResponse = await fetch(`/api/sessions/${currentSessionId}/start`, {
          method: 'POST'
        });
        
        const startData = await startResponse.json();
        
        if (startResponse.ok) {
          // Show QR code container
          qrcodeContainer.style.display = 'block';
          
          // Update status
          sessionStatus.className = 'alert alert-info';
          sessionStatus.textContent = 'Waiting for QR code...';
          connectQrBtn.innerHTML = 'Waiting for QR...';
        } else {
          showError(startData.message || 'Failed to start WhatsApp session');
          connectQrBtn.disabled = false;
          connectQrBtn.textContent = 'Retry Connection';
        }
      } catch (error) {
        console.error('Error connecting session:', error);
        showError('An error occurred while connecting the session');
        connectQrBtn.disabled = false;
        connectQrBtn.textContent = 'Retry Connection';
      }
    });
    
    // Save webhook button
    saveWebhookBtn.addEventListener('click', async function() {
      const sessionId = webhookSessionIdInput.value;
      const webhookUrl = webhookUrlInput.value.trim();
      
      try {
        saveWebhookBtn.disabled = true;
        saveWebhookBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        
        const response = await fetch(`/api/whatsapp/webhook/${sessionId}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ url: webhookUrl })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showSuccess(data.message || 'Webhook saved successfully');
          webhookModal.hide();
        } else {
          showError(data.message || 'Failed to save webhook URL');
        }
      } catch (error) {
        console.error('Error saving webhook URL:', error);
        showError('An error occurred while saving the webhook URL');
      } finally {
        saveWebhookBtn.disabled = false;
        saveWebhookBtn.textContent = 'Save Webhook';
      }
    });
    
    // Socket.io event listeners
    socket.on('qr', (data) => {
      console.log('QR event received:', data);
      console.log('Current session ID:', currentSessionId);
      console.log('Received session ID:', data.sessionId);
      console.log('Session ID types:', typeof currentSessionId, typeof data.sessionId);
      console.log('QR data length:', data.qr ? data.qr.length : 'no qr data');
      
      // Send confirmation back to server
      socket.emit('qr_received_by_client', { sessionId: data.sessionId });
      
      // Check if this QR code is for our current session (convert both to strings for comparison)
      if (currentSessionId && String(data.sessionId) === String(currentSessionId)) {
        console.log('QR code matches current session, displaying...');
        
        // Show QR code container
        qrcodeContainer.style.display = 'block';
        sessionStatus.style.display = 'block';
        
        // Clear previous QR code
        qrcodeElement.innerHTML = '';
        
        // Try to generate QR code with better error handling
        try {
          console.log('Attempting to generate QR code with canvas...');
          const canvas = document.createElement('canvas');
          qrcodeElement.appendChild(canvas);
          
          // Generate QR code on the canvas
          QRCode.toCanvas(canvas, data.qr, { width: 250, margin: 2 }, function (error) {
            if (error) {
              console.error('Error generating QR code with canvas:', error);
              
              // Remove failed canvas
              if (canvas.parentNode) {
                canvas.parentNode.removeChild(canvas);
              }
              
              // Try alternative method using QRCode.toDataURL() as fallback
              console.log('Trying fallback method with toDataURL...');
              try {
                QRCode.toDataURL(data.qr, { width: 250, margin: 2 }, function (err, dataUrl) {
                  if (err) {
                    console.error('Error generating QR code with dataURL:', err);
                    qrcodeElement.innerHTML = `
                      <div class="alert alert-danger">
                        <i class="bi bi-exclamation-triangle"></i>
                        Error generating QR code. Please try again.
                      </div>
                    `;
                  } else {
                    console.log('QR code generated successfully with dataURL');
                    // Create an image element and set the data URL
                    const img = document.createElement('img');
                    img.src = dataUrl;
                    img.alt = 'WhatsApp QR Code';
                    img.style.maxWidth = '100%';
                    img.className = 'border rounded shadow-sm';
                    qrcodeElement.innerHTML = '';
                    qrcodeElement.appendChild(img);
                    
                    // Add instructions
                    const instructions = document.createElement('p');
                    instructions.className = 'mt-3 text-muted';
                    instructions.textContent = 'Scan this QR code with WhatsApp on your phone';
                    qrcodeElement.appendChild(instructions);
                  }
                });
              } catch (fallbackError) {
                console.error('Fallback QR generation failed:', fallbackError);
                qrcodeElement.innerHTML = `
                  <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle"></i>
                    QR Code library error. Please refresh the page and try again.
                  </div>
                `;
              }
            } else {
              console.log('QR code generated successfully with canvas');
              
              // Add instructions
              const instructions = document.createElement('p');
              instructions.className = 'mt-3 text-muted';
              instructions.textContent = 'Scan this QR code with WhatsApp on your phone';
              qrcodeElement.appendChild(instructions);
            }
          });
        } catch (error) {
          console.error('Critical error in QR generation:', error);
          qrcodeElement.innerHTML = `
            <div class="alert alert-danger">
              <i class="bi bi-exclamation-triangle"></i>
              Critical error. Please refresh the page and try again.
            </div>
          `;
        }
        
        // Update status
        sessionStatus.className = 'alert alert-warning';
        sessionStatus.textContent = 'Scan the QR code with your WhatsApp to connect';
      } else {
        console.log('QR code does not match current session or no current session');
        if (!currentSessionId) {
          console.log('No current session ID set');
        } else {
          console.log(`Session ID mismatch: current=${currentSessionId}, received=${data.sessionId}`);
        }
      }
    });
    
    socket.on('qr_timeout', (data) => {
      console.log('QR timeout event received:', data);
      if (currentSessionId && String(data.sessionId) === String(currentSessionId)) {
        sessionStatus.className = 'alert alert-warning';
        sessionStatus.innerHTML = `
          <i class="bi bi-exclamation-triangle"></i>
          QR code generation timeout. The WhatsApp client may need more time to initialize.
          <button class="btn btn-sm btn-outline-warning ms-2" onclick="retryQRGeneration()">
            <i class="bi bi-arrow-clockwise"></i> Retry
          </button>
        `;
        sessionStatus.style.display = 'block';
        
        // Re-enable connect button for manual retry
        connectQrBtn.disabled = false;
        connectQrBtn.textContent = 'Retry Connection';
      }
    });
    
    socket.on('init_error', (data) => {
      console.log('Init error event received:', data);
      if (currentSessionId && String(data.sessionId) === String(currentSessionId)) {
        sessionStatus.className = 'alert alert-danger';
        sessionStatus.textContent = `Initialization error: ${data.error}`;
        sessionStatus.style.display = 'block';
      }
    });
    
    socket.on('ready', (data) => {
      // Check if this event is for our current session
      if (currentSessionId && data.sessionId === currentSessionId) {
        // Update status
        sessionStatus.className = 'alert alert-success';
        sessionStatus.textContent = 'WhatsApp connected successfully!';
        
        // Hide QR code
        qrcodeContainer.style.display = 'none';
        
        // Update buttons
        connectQrBtn.disabled = false;
        connectQrBtn.textContent = 'Connected';
        
        // Reload page after a short delay
        setTimeout(() => {
          window.location.reload();
        }, 3000);
      }
    });
    
    socket.on('disconnected', (data) => {
      // Check if this event is for our current session
      if (currentSessionId && data.sessionId === currentSessionId) {
        // Update status
        sessionStatus.className = 'alert alert-danger';
        sessionStatus.textContent = 'WhatsApp disconnected';
        
        // Update buttons
        connectQrBtn.disabled = false;
        connectQrBtn.textContent = 'Retry';
      }
    });
    
    // Reset modal when hidden
    document.getElementById('new-session-modal').addEventListener('hidden.bs.modal', function () {
      // Reset form
      newSessionForm.reset();
      
      // Hide QR code and status
      qrcodeContainer.style.display = 'none';
      sessionStatus.style.display = 'none';
      
      // Reset buttons
      createSessionBtn.disabled = false;
      createSessionBtn.textContent = 'Create Session';
      createSessionBtn.style.display = 'inline-block';
      
      connectQrBtn.disabled = false;
      connectQrBtn.textContent = 'Connect via QR';
      connectQrBtn.style.display = 'none';
      
      // Enable form inputs
      sessionNameInput.disabled = false;
      
      // Reset session ID
      currentSessionId = null;
    });
    
    // Helper functions for showing messages
    function showSuccess(message) {
      const toast = document.createElement('div');
      toast.className = 'toast align-items-center text-white bg-success border-0';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      const toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      toastContainer.appendChild(toast);
      
      document.body.appendChild(toastContainer);
      const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
      bsToast.show();
      
      // Remove the container when hidden
      toast.addEventListener('hidden.bs.toast', function () {
        document.body.removeChild(toastContainer);
      });
    }
    
    function showError(message) {
      const toast = document.createElement('div');
      toast.className = 'toast align-items-center text-white bg-danger border-0';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      const toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      toastContainer.appendChild(toast);
      
      document.body.appendChild(toastContainer);
      const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
      bsToast.show();
      
      // Remove the container when hidden
      toast.addEventListener('hidden.bs.toast', function () {
        document.body.removeChild(toastContainer);
      });
    }
    
    // Retry QR generation function
    window.retryQRGeneration = async function() {
      if (!currentSessionId) {
        showError('No session ID available for retry');
        return;
      }
      
      try {
        console.log('Retrying QR generation for session:', currentSessionId);
        sessionStatus.className = 'alert alert-info';
        sessionStatus.textContent = 'Retrying WhatsApp connection...';
        
        // First try to restart the session
        const restartResponse = await fetch(`/api/sessions/${currentSessionId}/restart`, {
          method: 'POST'
        });
        
        const restartData = await restartResponse.json();
        
        if (restartResponse.ok) {
          console.log('Session restart successful, waiting for QR...');
          sessionStatus.textContent = 'Session restarted, waiting for QR code...';
        } else {
          console.error('Session restart failed:', restartData);
          showError(restartData.message || 'Failed to restart session');
        }
      } catch (error) {
        console.error('Error retrying QR generation:', error);
        showError('An error occurred while retrying');
      }
    };
  });
</script>

<%- include('../partials/footer') %>