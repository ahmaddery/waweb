<%- include('../partials/header', { title: title }) %>

<div class="row">
  <div class="col-12">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="h3">User Profile</h1>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-md-8 mx-auto">
    <div class="card">
      <div class="card-header">
        <h5 class="card-title mb-0">Profile Information</h5>
      </div>
      <div class="card-body">
        <% if (locals.errorMessage) { %>
          <div class="alert alert-danger" role="alert">
            <%= errorMessage %>
          </div>
        <% } %>
        
        <% if (locals.successMessage) { %>
          <div class="alert alert-success" role="alert">
            <%= successMessage %>
          </div>
        <% } %>
        
        <form id="profile-form" action="/api/user/profile" method="POST">
          <div class="mb-3">
            <label for="username" class="form-label">Username</label>
            <input type="text" class="form-control" id="username" name="username" value="<%= user.username %>" required>
          </div>
          
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" name="email" value="<%= user.email %>" required>
          </div>
          
          <hr class="my-4">
          
          <h5>Change Password</h5>
          <p class="text-muted small">Leave blank if you don't want to change your password</p>
          
          <div class="mb-3">
            <label for="current_password" class="form-label">Current Password</label>
            <input type="password" class="form-control" id="current_password" name="current_password">
          </div>
          
          <div class="mb-3">
            <label for="new_password" class="form-label">New Password</label>
            <input type="password" class="form-control" id="new_password" name="new_password">
            <div class="form-text">Password must be at least 8 characters long</div>
          </div>
          
          <div class="mb-3">
            <label for="confirm_password" class="form-label">Confirm New Password</label>
            <input type="password" class="form-control" id="confirm_password" name="confirm_password">
          </div>
          
          <div class="d-grid gap-2">
            <button type="submit" class="btn btn-primary" id="save-profile-btn">Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const profileForm = document.getElementById('profile-form');
    const saveProfileBtn = document.getElementById('save-profile-btn');
    const newPasswordInput = document.getElementById('new_password');
    const confirmPasswordInput = document.getElementById('confirm_password');
    const currentPasswordInput = document.getElementById('current_password');
    
    profileForm.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Validate passwords if trying to change password
      if (newPasswordInput.value || confirmPasswordInput.value) {
        if (!currentPasswordInput.value) {
          showError('Current password is required to change password');
          return;
        }
        
        if (newPasswordInput.value !== confirmPasswordInput.value) {
          showError('New passwords do not match');
          return;
        }
        
        if (newPasswordInput.value.length < 8) {
          showError('Password must be at least 8 characters long');
          return;
        }
      }
      
      try {
        saveProfileBtn.disabled = true;
        saveProfileBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Saving...';
        
        const formData = new FormData(profileForm);
        const data = {};
        
        for (const [key, value] of formData.entries()) {
          // Only include password fields if they have values
          if (key.includes('password') && !value) continue;
          data[key] = value;
        }
        
        const response = await fetch('/api/user/profile', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        
        if (response.ok) {
          showSuccess(result.message || 'Profile updated successfully');
          
          // Clear password fields
          currentPasswordInput.value = '';
          newPasswordInput.value = '';
          confirmPasswordInput.value = '';
          
          // Update displayed username if it was changed
          const navUsername = document.getElementById('nav-username');
          if (navUsername) {
            navUsername.textContent = data.username;
          }
        } else {
          showError(result.message || 'Failed to update profile');
        }
      } catch (error) {
        console.error('Error updating profile:', error);
        showError('An error occurred while updating your profile');
      } finally {
        saveProfileBtn.disabled = false;
        saveProfileBtn.textContent = 'Save Changes';
      }
    });
    
    // Helper functions for showing messages
    function showSuccess(message) {
      const alertContainer = document.createElement('div');
      alertContainer.className = 'alert alert-success alert-dismissible fade show';
      alertContainer.setAttribute('role', 'alert');
      
      alertContainer.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;
      
      // Insert at the top of the form
      profileForm.parentNode.insertBefore(alertContainer, profileForm);
      
      // Auto dismiss after 5 seconds
      setTimeout(() => {
        const bsAlert = new bootstrap.Alert(alertContainer);
        bsAlert.close();
      }, 5000);
    }
    
    function showError(message) {
      const alertContainer = document.createElement('div');
      alertContainer.className = 'alert alert-danger alert-dismissible fade show';
      alertContainer.setAttribute('role', 'alert');
      
      alertContainer.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
      `;
      
      // Insert at the top of the form
      profileForm.parentNode.insertBefore(alertContainer, profileForm);
      
      // Auto dismiss after 5 seconds
      setTimeout(() => {
        const bsAlert = new bootstrap.Alert(alertContainer);
        bsAlert.close();
      }, 5000);
    }
  });
</script>

<%- include('../partials/footer') %>