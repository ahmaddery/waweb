<%- include('../partials/header', { title: title }) %>

<div class="row">
  <div class="col-12">
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h1 class="h3">User Management</h1>
      <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#add-user-modal">
        <i class="bi bi-person-plus"></i> Add User
      </button>
    </div>
  </div>
</div>

<div class="row">
  <div class="col-12">
    <div class="card">
      <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="card-title mb-0">All Users</h5>
        <div class="d-flex">
          <div class="input-group">
            <input type="text" class="form-control" id="search-input" placeholder="Search users...">
            <button class="btn btn-outline-secondary" type="button" id="search-btn">
              <i class="bi bi-search"></i>
            </button>
          </div>
        </div>
      </div>
      <div class="card-body">
        <% if (users && users.length > 0) { %>
          <div class="table-responsive">
            <table class="table table-hover">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Username</th>
                  <th>Email</th>
                  <th>Role</th>
                  <th>Created</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <% users.forEach(user => { %>
                  <tr>
                    <td><%= user.id %></td>
                    <td><%= user.username %></td>
                    <td><%= user.email %></td>
                    <td>
                      <% if (user.role === 'admin') { %>
                        <span class="badge bg-danger">Admin</span>
                      <% } else { %>
                        <span class="badge bg-primary">User</span>
                      <% } %>
                    </td>
                    <td><%= new Date(user.created_at).toLocaleString() %></td>
                    <td>
                      <div class="btn-group">
                        <button class="btn btn-sm btn-info edit-user-btn" data-user-id="<%= user.id %>" data-bs-toggle="modal" data-bs-target="#edit-user-modal">
                          <i class="bi bi-pencil"></i>
                        </button>
                        <button class="btn btn-sm btn-danger delete-user-btn" data-user-id="<%= user.id %>" data-username="<%= user.username %>">
                          <i class="bi bi-trash"></i>
                        </button>
                      </div>
                    </td>
                  </tr>
                <% }); %>
              </tbody>
            </table>
          </div>
          
          <!-- Pagination -->
          <% if (totalPages > 1) { %>
            <nav aria-label="User pagination">
              <ul class="pagination justify-content-center">
                <li class="page-item <%= currentPage === 1 ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage - 1 %><%= search ? '&search=' + search : '' %>" aria-label="Previous">
                    <span aria-hidden="true">&laquo;</span>
                  </a>
                </li>
                
                <% for(let i = 1; i <= totalPages; i++) { %>
                  <li class="page-item <%= currentPage === i ? 'active' : '' %>">
                    <a class="page-link" href="?page=<%= i %><%= search ? '&search=' + search : '' %>"><%= i %></a>
                  </li>
                <% } %>
                
                <li class="page-item <%= currentPage === totalPages ? 'disabled' : '' %>">
                  <a class="page-link" href="?page=<%= currentPage + 1 %><%= search ? '&search=' + search : '' %>" aria-label="Next">
                    <span aria-hidden="true">&raquo;</span>
                  </a>
                </li>
              </ul>
            </nav>
          <% } %>
        <% } else { %>
          <div class="text-center py-5">
            <i class="bi bi-people text-muted" style="font-size: 3rem;"></i>
            <p class="text-muted mt-3">No users found</p>
            <% if (search) { %>
              <p>No results found for "<%= search %>". <a href="/admin/users">Clear search</a></p>
            <% } else { %>
              <p>Click the "Add User" button to create your first user.</p>
            <% } %>
          </div>
        <% } %>
      </div>
    </div>
  </div>
</div>

<!-- Add User Modal -->
<div class="modal fade" id="add-user-modal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Add New User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="add-user-form">
          <div class="mb-3">
            <label for="add-username" class="form-label">Username</label>
            <input type="text" class="form-control" id="add-username" required>
          </div>
          
          <div class="mb-3">
            <label for="add-email" class="form-label">Email</label>
            <input type="email" class="form-control" id="add-email" required>
          </div>
          
          <div class="mb-3">
            <label for="add-password" class="form-label">Password</label>
            <input type="password" class="form-control" id="add-password" required>
            <div class="form-text">Password must be at least 8 characters long</div>
          </div>
          
          <div class="mb-3">
            <label for="add-confirm-password" class="form-label">Confirm Password</label>
            <input type="password" class="form-control" id="add-confirm-password" required>
          </div>
          
          <div class="mb-3">
            <label for="add-role" class="form-label">Role</label>
            <select class="form-select" id="add-role" required>
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="add-user-btn">Add User</button>
      </div>
    </div>
  </div>
</div>

<!-- Edit User Modal -->
<div class="modal fade" id="edit-user-modal" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Edit User</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="edit-user-form">
          <input type="hidden" id="edit-user-id">
          
          <div class="mb-3">
            <label for="edit-username" class="form-label">Username</label>
            <input type="text" class="form-control" id="edit-username" required>
          </div>
          
          <div class="mb-3">
            <label for="edit-email" class="form-label">Email</label>
            <input type="email" class="form-control" id="edit-email" required>
          </div>
          
          <div class="mb-3">
            <label for="edit-role" class="form-label">Role</label>
            <select class="form-select" id="edit-role" required>
              <option value="user">User</option>
              <option value="admin">Admin</option>
            </select>
          </div>
          
          <hr class="my-4">
          
          <h5>Change Password</h5>
          <p class="text-muted small">Leave blank if you don't want to change the password</p>
          
          <div class="mb-3">
            <label for="edit-password" class="form-label">New Password</label>
            <input type="password" class="form-control" id="edit-password">
            <div class="form-text">Password must be at least 8 characters long</div>
          </div>
          
          <div class="mb-3">
            <label for="edit-confirm-password" class="form-label">Confirm New Password</label>
            <input type="password" class="form-control" id="edit-confirm-password">
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="update-user-btn">Update User</button>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Elements
    const addUserForm = document.getElementById('add-user-form');
    const addUserBtn = document.getElementById('add-user-btn');
    const editUserForm = document.getElementById('edit-user-form');
    const updateUserBtn = document.getElementById('update-user-btn');
    const searchInput = document.getElementById('search-input');
    const searchBtn = document.getElementById('search-btn');
    const editUserBtns = document.querySelectorAll('.edit-user-btn');
    const deleteUserBtns = document.querySelectorAll('.delete-user-btn');
    
    // Add user button
    addUserBtn.addEventListener('click', async function() {
      const username = document.getElementById('add-username').value.trim();
      const email = document.getElementById('add-email').value.trim();
      const password = document.getElementById('add-password').value;
      const confirmPassword = document.getElementById('add-confirm-password').value;
      const role = document.getElementById('add-role').value;
      
      // Validate form
      if (!username || !email || !password || !confirmPassword) {
        showError('All fields are required');
        return;
      }
      
      if (password !== confirmPassword) {
        showError('Passwords do not match');
        return;
      }
      
      if (password.length < 8) {
        showError('Password must be at least 8 characters long');
        return;
      }
      
      try {
        addUserBtn.disabled = true;
        addUserBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Adding...';
        
        const response = await fetch('/api/admin/users', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            username,
            email,
            password,
            role
          })
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showSuccess(data.message || 'User added successfully');
          
          // Reset form
          addUserForm.reset();
          
          // Close modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('add-user-modal'));
          modal.hide();
          
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          showError(data.message || 'Failed to add user');
        }
      } catch (error) {
        console.error('Error adding user:', error);
        showError('An error occurred while adding the user');
      } finally {
        addUserBtn.disabled = false;
        addUserBtn.textContent = 'Add User';
      }
    });
    
    // Edit user buttons
    editUserBtns.forEach(button => {
      button.addEventListener('click', async function() {
        const userId = this.getAttribute('data-user-id');
        document.getElementById('edit-user-id').value = userId;
        
        try {
          const response = await fetch(`/api/admin/users/${userId}`);
          const data = await response.json();
          
          if (response.ok) {
            document.getElementById('edit-username').value = data.user.username;
            document.getElementById('edit-email').value = data.user.email;
            document.getElementById('edit-role').value = data.user.role;
            
            // Clear password fields
            document.getElementById('edit-password').value = '';
            document.getElementById('edit-confirm-password').value = '';
          } else {
            showError(data.message || 'Failed to load user data');
          }
        } catch (error) {
          console.error('Error loading user data:', error);
          showError('An error occurred while loading user data');
        }
      });
    });
    
    // Update user button
    updateUserBtn.addEventListener('click', async function() {
      const userId = document.getElementById('edit-user-id').value;
      const username = document.getElementById('edit-username').value.trim();
      const email = document.getElementById('edit-email').value.trim();
      const role = document.getElementById('edit-role').value;
      const password = document.getElementById('edit-password').value;
      const confirmPassword = document.getElementById('edit-confirm-password').value;
      
      // Validate form
      if (!username || !email) {
        showError('Username and email are required');
        return;
      }
      
      // Validate password if provided
      if (password || confirmPassword) {
        if (password !== confirmPassword) {
          showError('Passwords do not match');
          return;
        }
        
        if (password.length < 8) {
          showError('Password must be at least 8 characters long');
          return;
        }
      }
      
      try {
        updateUserBtn.disabled = true;
        updateUserBtn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Updating...';
        
        const userData = {
          username,
          email,
          role
        };
        
        // Only include password if provided
        if (password) {
          userData.password = password;
        }
        
        const response = await fetch(`/api/admin/users/${userId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(userData)
        });
        
        const data = await response.json();
        
        if (response.ok) {
          showSuccess(data.message || 'User updated successfully');
          
          // Close modal
          const modal = bootstrap.Modal.getInstance(document.getElementById('edit-user-modal'));
          modal.hide();
          
          // Reload page after a short delay
          setTimeout(() => {
            window.location.reload();
          }, 2000);
        } else {
          showError(data.message || 'Failed to update user');
        }
      } catch (error) {
        console.error('Error updating user:', error);
        showError('An error occurred while updating the user');
      } finally {
        updateUserBtn.disabled = false;
        updateUserBtn.textContent = 'Update User';
      }
    });
    
    // Delete user buttons
    deleteUserBtns.forEach(button => {
      button.addEventListener('click', async function() {
        const userId = this.getAttribute('data-user-id');
        const username = this.getAttribute('data-username');
        
        if (confirm(`Are you sure you want to delete the user "${username}"? This action cannot be undone.`)) {
          try {
            const response = await fetch(`/api/admin/users/${userId}`, {
              method: 'DELETE'
            });
            
            const data = await response.json();
            
            if (response.ok) {
              showSuccess(data.message || 'User deleted successfully');
              
              // Reload page after a short delay
              setTimeout(() => {
                window.location.reload();
              }, 2000);
            } else {
              showError(data.message || 'Failed to delete user');
            }
          } catch (error) {
            console.error('Error deleting user:', error);
            showError('An error occurred while deleting the user');
          }
        }
      });
    });
    
    // Search button
    searchBtn.addEventListener('click', function() {
      const searchTerm = searchInput.value.trim();
      
      if (searchTerm) {
        window.location.href = '/admin/users?search=' + encodeURIComponent(searchTerm);
      } else {
        window.location.href = '/admin/users';
      }
    });
    
    // Search input enter key
    searchInput.addEventListener('keyup', function(event) {
      if (event.key === 'Enter') {
        searchBtn.click();
      }
    });
    
    // Set search input value from URL parameter
    const urlParams = new URLSearchParams(window.location.search);
    const searchParam = urlParams.get('search');
    if (searchParam) {
      searchInput.value = searchParam;
    }
    
    // Helper functions for showing messages
    function showSuccess(message) {
      const toast = document.createElement('div');
      toast.className = 'toast align-items-center text-white bg-success border-0';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      const toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      toastContainer.appendChild(toast);
      
      document.body.appendChild(toastContainer);
      const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
      bsToast.show();
      
      // Remove the container when hidden
      toast.addEventListener('hidden.bs.toast', function () {
        document.body.removeChild(toastContainer);
      });
    }
    
    function showError(message) {
      const toast = document.createElement('div');
      toast.className = 'toast align-items-center text-white bg-danger border-0';
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      
      toast.innerHTML = `
        <div class="d-flex">
          <div class="toast-body">
            ${message}
          </div>
          <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
      `;
      
      const toastContainer = document.createElement('div');
      toastContainer.className = 'toast-container position-fixed bottom-0 end-0 p-3';
      toastContainer.appendChild(toast);
      
      document.body.appendChild(toastContainer);
      const bsToast = new bootstrap.Toast(toast, { delay: 5000 });
      bsToast.show();
      
      // Remove the container when hidden
      toast.addEventListener('hidden.bs.toast', function () {
        document.body.removeChild(toastContainer);
      });
    }
  });
</script>

<%- include('../partials/footer') %>